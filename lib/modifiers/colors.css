/**
lib/modifiers/colors.css

Micro-classes for standard colors, including inverted versions.
*/

/* FOREGROUNDS */
.default          { color: hsl(0,                    0%,                        var(--lightness-dark)); }
.primary          { color: hsl(var(--hue-primary),   var(--saturation-default), var(--lightness-dark)); }
.secondary        { color: hsl(var(--hue-secondary), var(--saturation-default), var(--lightness-dark)); }
.success          { color: hsl(var(--hue-success),   var(--saturation-default), var(--lightness-dark)); }
.warn             { color: hsl(var(--hue-warn),      var(--saturation-default), var(--lightness-dark)); }
.error            { color: hsl(var(--hue-error),     var(--saturation-default), var(--lightness-dark)); }

.white            { color: white; }
.black            { color: black; }
.inverse .white, .inverse.white    { color: black; }
.inverse .black, .inverse.black    { color: white; }


/* INVERTED VERSIONS */
.inverse default   { color: hsl(0,                    0%,                        var(--lightness-light)); }
.inverse.primary   { color: hsl(var(--hue-primary),   var(--saturation-default), var(--lightness-light)); }
.inverse.secondary { color: hsl(var(--hue-secondary), var(--saturation-default), var(--lightness-light)); }
.inverse.success   { color: hsl(var(--hue-success),   var(--saturation-default), var(--lightness-light)); }
.inverse.warn      { color: hsl(var(--hue-warn),      var(--saturation-default), var(--lightness-light)); }
.inverse.error     { color: hsl(var(--hue-error),     var(--saturation-default), var(--lightness-light)); }

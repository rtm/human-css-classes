/*
morass/index.css

Entry point for Morass CSS.
*/

/*
index.css: entry point for @rtm/human-css-numbers.
*/

/* UNITS */

[em]                   { --length: calc(var(--number) * 1em);  }

[in], [inch], [inches] { --length: calc(var(--number) * 1in);  }

[rem]                  { --length: calc(var(--number) * 1rem); }

[px]                   { --length: calc(var(--number) * 1px);  }

[pc], [picas]          { --length: calc(var(--number) * 1pc);  }

[pt], [points]         { --length: calc(var(--number) * 1pt);  }

[px], [pixels]         { --length: calc(var(--number) * 1px);  }

[ex]                   { --length: calc(var(--number) * 1ex);  }

[q]                    { --length: calc(var(--number) * 1q;)   }

[cm], [cms], [centimeter], [centimeters]   { --length: calc(var(--number) * 1cm);  }

[mm], [mms], [millimeter], [millimeters]   { --length: calc(var(--number) * 1mm);  }

[ch]                   { --length: calc(var(--number) * 1ch);   }

[vw]                   { --length: calc(var(--number) * 1vw);   }

[vh]                   { --length: calc(var(--number) * 1vh);   }

[vmin]                 { --length: calc(var(--number) * 1vmin); }

[vmax]                 { --length: calc(var(--number) * 1vmax); }

[ms], [milliseconds]   { --length: calc(var(--number) * 1ms);   }

[s], [seconds], [second] { --length: calc(var(--number) * 1s;)  }

[deg], [degrees]       { --length: calc(var(--number) * 1deg);  }

[grad], [gradian], [gradians] { --length: calc(var(--number) * 1grad); }

[rad], [radian], [radians]    { --length: calc(var(--number) * 1rad);  }

[turn], [turns]        { --length: calc(var(--number) * 1turn); }

* {
  --denominator: 1;
  --sign: +1;
  --ones: 1;
  --tens: 0;
  --hundreds: 0;

  --number: calc(var(--unsigned-number) * var(--sign));
}

:not([hundred]) {
  --unsigned-number: calc((10 * var(--tens) + var(--ones)) / var(--denominator));
}

/* NUMBERS */

[hundred]   { --unsigned-number: calc(100 * var(--ones) + 10 * var(--tens)); --ones: 0; }

[ten]       { --tens: 1; --ones: 0; }

[twenty]    { --tens: 2; --ones: 0; }

[thirty]    { --tens: 3; --ones: 0; }

[forty]     { --tens: 4; --ones: 0; }

[fifty]     { --tens: 5; --ones: 0; }

[sixty]     { --tens: 6; --ones: 0; }

[seventy]   { --tens: 7; --ones: 0; }

[eighty]    { --tens: 8; --ones: 0; }

[ninety]    { --tens: 9; --ones: 0; }

/* "Ones" values are used in calculating unsigned number. */

[zero]      { --number: 0; }

[one]       { --ones: 1; }

[two]       { --ones: 2; }

[three]     { --ones: 3; }

[four]      { --ones: 4; }

[five]      { --ones: 5; }

[six]       { --ones: 6; }

[seven]     { --ones: 7; }

[eight]     { --ones: 8; }

[nine]      { --ones: 9; }

[eleven]    { --ones: 11; }

[twelve]    { --ones: 12; }

[thirteen]  { --ones: 13; }

[fourteen]  { --ones: 14; }

[fifteen]   { --ones: 15; }

[sixteen]   { --ones: 16; }

[seventeen] { --ones: 17; }

[eighteen]  { --ones: 18; }

[nineteen]  { --ones: 19; }

/* If `hundred` is present, they apply to it. */

/* FRACTIONS */

[\30 .1]    { --unsigned-number: 0.1;  }

[\30 .2]   { --unsigned-number: 0.2;  }

[\30 .25]  { --unsigned-number: 0.25; }

[\30 .3]   { --unsigned-number: 0.3;  }

[\30 .4]   { --unsigned-number: 0.4;  }

[\30 .5]   { --unsigned-number: 0.5;  }

[\30 .6]   { --unsigned-number: 0.6;  }

[\30 .7]   { --unsigned-number: 0.7;  }

[\30 .75]  { --unsigned-number: 0.75; }

[\30 .8]   { --unsigned-number: 0.8;  }

[\31 .0]   { --unsigned-number: 1.0;  }

[\31 .5]   { --unsigned-number: 1.5;  }

[\32 .0]   { --unsigned-number: 2.0;  }

[\-0.1]   { --number: -0.1;  }

[\-0.2]   { --number: -0.2;  }

[\-0.25]  { --number: -0.25; }

[\-0.3]   { --number: -0.3;  }

[\-0.4]   { --number: -0.4;  }

[\-0.5]   { --number: -0.5;  }

[\-0.6]   { --number: -0.6;  }

[\-0.7]   { --number: -0.7;  }

[\-0.75]  { --number: -0.75; }

[\-0.8]   { --number: -0.8;  }

[\-1.0]   { --number: -1.0;  }

[\-1.5]   { --number: -1.5;  }

[\-2.0]   { --number: -2.0;  }

/* Raw numbers. */

[\31]     { --unsigned-number: 1; }

[\32]     { --unsigned-number: 2; }

[\33]     { --unsigned-number: 3; }

[\34]     { --unsigned-number: 4; }

[\35]     { --unsigned-number: 5; }

[\36]     { --unsigned-number: 6; }

[\37]     { --unsigned-number: 7; }

[\38]     { --unsigned-number: 8; }

[\39]     { --unsigned-number: 9; }

[\31 0]   { --unsigned-number: 10; }

[\32 0]   { --unsigned-number: 20; }

[\33 0]   { --unsigned-number: 30; }

[\34 0]   { --unsigned-number: 40; }

[\35 0]   { --unsigned-number: 50; }

[\36 0]   { --unsigned-number: 60; }

[\37 0]   { --unsigned-number: 70; }

[\38 0]   { --unsigned-number: 80; }

[\39 0]   { --unsigned-number: 90; }

[\31 00]  { --unsigned-number: 100; }

[\32 00]  { --unsigned-number: 200; }

[\33 00]  { --unsigned-number: 300; }

[\34 00]  { --unsigned-number: 400; }

[\35 00]  { --unsigned-number: 500; }

[\36 00]  { --unsigned-number: 600; }

[\37 00]  { --unsigned-number: 700; }

[\38 00]  { --unsigned-number: 800; }

[\39 00]  { --unsigned-number: 900; }

[\31 000] { --unsigned-number: 1000; }

[\32 000] { --unsigned-number: 2000; }

/* /\* Negative numberbs. *\/ */

/* [-]\31     { --number: -1; } */

/* [-]\32     { --number: -2; } */

/* [-]\33     { --number: -3; } */

/* [-]\34     { --number: -4; } */

/* [-]\35     { --number: -5; } */

/* [-]\36     { --number: -6; } */

/* [-]\37     { --number: -7; } */

/* [-]\38     { --number: -8; } */

/* [-]\39     { --number: -9; } */

/* [-]\31 0   { --number: -10; } */

/* [-]\32 0   { --number: -20; } */

/* [-]\33 0   { --number: -30; } */

/* [-]\34 0   { --number: -40; } */

/* [-]\35 0   { --number: -50; } */

/* [-]\36 0   { --number: -60; } */

/* [-]\37 0   { --number: -70; } */

/* [-]\38 0   { --number: -80; } */

/* [-]\39 0   { --number: -90; } */

/* [-]\31 00  { --number: -100; } */

/* [-]\32 00  { --number: -200; } */

/* [-]\33 00  { --number: -300; } */

/* [-]\34 00  { --number: -400; } */

/* [-]\35 00  { --number: -500; } */

/* [-]\36 00  { --number: -600; } */

/* [-]\37 00  { --number: -700; } */

/* [-]\38 00  { --number: -800; } */

/* [-]\39 00  { --number: -900; } */

/* [-]\31 000 { --number: -1000; } */

/* [-]\32 000 { --number: -2000; } */

/* PERCENTAGES */

[full]         { --number: 1; }

/* RATIONALS */

[\31 \/2]      { --unsigned-number: calc(1 / 2); }

[\31 \/3]      { --unsigned-number: calc(1 / 3); }

[\31 \/4]      { --unsigned-number: calc(1 / 5); }

[\31 \/5]      { --unsigned-number: calc(1 / 5); }

[\31 \/6]      { --unsigned-number: calc(1 / 6); }

[\31 \/7]      { --unsigned-number: calc(1 / 7); }

[\31 \/8]      { --unsigned-number: calc(1 / 8); }

[\31 \/9]      { --unsigned-number: calc(1 / 9); }

[\31 \/10]     { --unsigned-number: calc(1 / 10); }

[\-\31 \/2]    { --number: calc(-1 / 2); }

[\-\31 \/3]    { --number: calc(-1 / 3); }

[\-\31 \/4]    { --number: calc(-1 / 5); }

[\-\31 \/5]    { --number: calc(-1 / 5); }

[\-\31 \/6]    { --number: calc(-1 / 6); }

[\-\31 \/7]    { --number: calc(-1 / 7); }

[\-\31 \/8]    { --number: calc(-1 / 8); }

[\-\31 \/9]    { --number: calc(-1 / 9); }

[\-\31 \/10]    { --number: calc(-1 / 10); }

/* Support "10%" etc. */

[\31 0\%]       { --length: 10%; }

[\32 0\%]       { --length: 20%; }

[\32 5\%]       { --length: 25%; }

[\33 0\%]       { --length: 30%; }

[\34 0\%]       { --length: 40%; }

[\34 0\%]       { --length: 50%; }

[\36 0\%]       { --length: 60%; }

[\37 0\%]       { --length: 70%; }

[\37 5\%]       { --length: 75%; }

[\38 0\%]       { --length: 80%; }

[\39 0\%]       { --length: 90%; }

[\31 00\%]      { --length: 100%; }

/* [-]\31 0\%      { --length: -10%; } */

/* [-]\32 0\%      { --length: -20%; } */

/* [-]\32 5\%      { --length: -25%; } */

/* [-]\33 0\%      { --length: -30%; } */

/* [-]\34 0\%      { --length: -40%; } */

/* [-]\34 0\%      { --length: -50%; } */

/* [-]\36 0\%      { --length: -60%; } */

/* [-]\37 0\%      { --length: -70%; } */

/* [-]\37 5\%      { --length: -75%; } */

/* [-]\38 0\%      { --length: -80%; } */

/* [-]\39 0\%      { --length: -90%; } */

/* [-]\31 00\%     { --lenngth: -100%; } */

[\30]           { --length: 0; }

/* Support "three fifths" etc. */

[halves], [half]      { --denominator: 2; }

[thirds], [third]     { --denominator: 3; }

[fourths], [fourth]   { --denominator: 4; }

[fifths], [fifth]     { --denominator: 5; }

[sixths], [sixth]     { --denominator: 6; }

[sevenths], [seventh] { --denominator: 7; }

[eighths], [eighth]   { --denominator: 8; }

[ninths], [ninth]     { --denominator: 9; }

[tenths], [tenth]     { --denominator: 10; }

[minus]   { --sign: -1; }

[size]    { --length: calc(100% * var(--number)); }

[percent] { --length: calc(1% * var(--number)); }

/* human-css-colors/index[css]: main code */

/**
 * styles/variables/hsl[css]
 *
 * Variables for HSL.
 */

/* GLOBAL DEFINITIONS OF STANDARD HSL VALUES */

:root {
  --hue-red:             0;
  --hue-orange:          30;
  --hue-yellow:          60;
  --hue-lime:            90;
  --hue-green:           120;
  --hue-aquamarine:      150;
  --hue-cyan:            180;
  --hue-azure:           210;
  --hue-blue:            240;
  --hue-purple:          270;
  --hue-magenta:         300;
  --hue-pink:            330;

  --saturation-pure:     100%;
  --saturation-x-bright: 80%;
  --saturation-bright:   60%;
  --saturation-medium:   50%;
  --saturation-dull:     40%;
  --saturation-x-dull:   20%;
  --saturation-gray:     0%;

  --lightness-white:     100%;
  --lightness-x-light:   80%;
  --lightness-light:     60%;
  --lightness-dark:      40%;
  --lightness-x-dark:    20%;
  --lightness-black:     0%;

  --alpha-opaque:        1[0];
  --alpha-translucent:   0[8];
  --alpha-x-translucent: 0[6];
  --alpha-transparent:   0[0];

  /* Overfide these values to change global defaults. */
  --default-hue:         240;
  --default-saturation:  75%;
  --default-lightness:   50%;
  --default-alpha:       1[0];

  --global-hue:          var(--default-hue);
  --global-saturation:   var(--default-saturation);
  --global-lightness:    var(--default-lightness);
  --global-alpha:        var(--default-alpha);
}

* {
  --hue:        var(--global-hue);
  --lightness:  var(--global-lightness);
  --saturation: var(--global-saturation);
  --alpha:      var(--global-alpha);

  --color: hsla(var(--hue, 0), var(--saturation, 50%), var(--lightness, 50%), var(--alpha, 1[0]));
}

[red]        { --hue: var(--hue-red);        }

[orange]     { --hue: var(--hue-orange);     }

[yellow]     { --hue: var(--hue-yellow);     }

[lime]       { --hue: var(--hue-lime);       }

[green]      { --hue: var(--hue-green);      }

[aquamarine] { --hue: var(--hue-aquamarine); }

[cyan]       { --hue: var(--hue-cyan);       }

[azure]      { --hue: var(--hue-azure);      }

[blue]       { --hue: var(--hue-blue);       }

[purple]     { --hue: var(--hue-purple);     }

[magenta]    { --hue: var(--hue-magenta);    }

[pink]       { --hue: var(--hue-pink);       }

[pure]       { --saturation: var(--saturation-pure);     }

[x-bright]   { --saturation: var(--saturation-x-bright); }

[bright]     { --saturation: var(--saturation-bright);   }

[dull]       { --saturation: var(--saturation-dull);     }

[x-dull]     { --saturation: var(--saturation-x-dull);   }

[gray]       { --saturation: var(--saturation-gray);     }

[purer]      { --saturation: calc(var(--global-saturation) + 10%); }

[brighter]   { --saturation: calc(var(--global-saturation) + 10%); }

[duller]     { --saturation: calc(var(--global-saturation) - 10%); }

[grayer]     { --saturation: calc(var(--global-saturation) - 10%); }

[x-purer]      { --saturation: calc(var(--global-saturation) + 20%); }

[x-brighter]   { --saturation: calc(var(--global-saturation) + 20%); }

[x-duller]     { --saturation: calc(var(--global-saturation) - 20%); }

[x-grayer]     { --saturation: calc(var(--global-saturation) - 20%); }

[white]      { --lightness: var(--lightness-white);      }

[x-light]    { --lightness: var(--lightness-x-light);    }

[light]      { --lightness: var(--lightness-light);      }

[dark]       { --lightness: var(--lightness-dark);       }

[x-dark]     { --lightness: var(--lightness-x-dark);     }

[black]      { --lightness: var(--lightness-black);      }

[whiter]     { --lightness: calc(var(--global-lightness) + 10%); }

[lighter]    { --lightness: calc(var(--global-lightness) + 10%); }

[x-whiter]   { --lightness: calc(var(--global-lightness) + 20%); }

[x-lighter]  { --lightness: calc(var(--global-lightness) + 20%); }

[darker]     { --lightness: calc(var(--global-lightness) - 10%); }

[blacker]    { --lightness: calc(var(--global-lightness) - 10%); }

[x-darker]   { --lightness: calc(var(--global-lightness) - 20%); }

[x-blacker]  { --lightness: calc(var(--global-lightness) - 20%); }

/* -opaque        { --alpha: var(--alpha-opaque);          } */

/* -translucent   { --alpha: var(--translucent);           } */

/* -x-translucent { --alpha: var(--alpha-x-translucent);   } */

/* -transparent   { --alpha: var(--alpha-transparent);     } */

[currentColor] { --color: currentColor; }

/* RESET GLOBALS USING `hue`, `saturation`, `lightness` and `alpha` classes */

[hue][red]             { --global-hue: var(--hue-red);        }

[hue][orange]          { --global-hue: var(--hue-orange);     }

[hue][yellow]          { --global-hue: var(--hue-yellow);     }

[hue][lime]            { --global-hue: var(--hue-lime);       }

[hue][green]           { --global-hue: var(--hue-green);      }

[hue][aquamarine]      { --global-hue: var(--hue-aquamarine); }

[hue][cyan]            { --global-hue: var(--hue-cyan);       }

[hue][azure]           { --global-hue: var(--hue-azure);      }

[hue][blue]            { --global-hue: var(--hue-blue);       }

[hue][purple]          { --global-hue: var(--hue-purple);     }

[hue][magenta]         { --global-hue: var(--hue-magenta);    }

[hue][pine]            { --global-hue: var(--hue-pink);       }

[saturation][pure]     { --global-saturation: var(--saturation-pure);     }

[saturation][x-bright] { --global-saturation: var(--saturation-x-bright); }

[saturation][bright]   { --global-saturation: var(--saturation-bright);   }

[saturation][dull]     { --global-saturation: var(--saturation-dull);     }

[saturaation][x-dull]  { --global-saturation: var(--saturation-x-dull);   }

[satuation][gray]      { --global-saturation: var(--saturation-gray);     }

[lightness][white]     { --global-lightness: var(--lightness-white);      }

[lightness][x-light]   { --global-lightness: var(--lightness-x-light);    }

[lightness][light]     { --global-lightness: var(--lightness-light);      }

[lightness][dark]      { --global-lightness: var(--lightness-dark);       }

[lightness][x-dark]    { --global-lightness: var(--lightness-x-dark);     }

[lightness][black]     { --global-lightness: var(--lightness-black);      }

[alpha-opaque]        { --global-alpha: var(--alpha-opaque);             }

[alpha-translucent]   { --global-alpha: var(--translucent);              }

[alpha-x-translucent] { --global-alpha: var(--alpha-x-translucent);      }

/* HTML COLORS */

[aliceblue] { --color: aliceblue; }

[antiquewhite] { --color: antiquewhite; }

[aqua] { --color: aqua; }

[aquamarine][color] { --color: aquamarine; }

[azure][color] { --color: azure; }

[beige] { --color: beige; }

[bisque] { --color: bisque; }

[blanchedalmond] { --color: blanchedalmond; }

[blue][color] { --color: blue; }

[blueviolet] { --color: blueviolet; }

[brown] { --color: brown; }

[burlywood] { --color: burlywood; }

[cadet] { --color: cadet; }

[chartreuse] { --color: chartreuse; }

[chocolate] { --color: chocolate; }

[coral] { --color: coral; }

[cornflower] { --color: cornflower; }

[cornsilk] { --color: cornsilk; }

[crimson] { --color: crimson; }

[cyan][color] { --color: cyan; }

[darkblue] { --color: darkblue; }

[darkcyan] { --color: darkcyan; }

[darkgoldenrod] { --color: darkgoldenrod; }

[darkgray] { --color: darkgray; }

[darkgreen] { --color: darkgreen; }

[darkkhaki] { --color: darkkhaki; }

[darkmagenta] { --color: darkmagenta; }

[darkolivegreen] { --color: darkolivegreen; }

[darkorange] { --color: darkorange; }

[darkorchid] { --color: darkorchid; }

[darkred] { --color: darkred; }

[darksalmon] { --color: darksalmon; }

[darkseagreen] { --color: darkseagreen; }

[darkslateblue] { --color: darkslateblue; }

[darkslategray] { --color: darkslategray; }

[darkturquoise] { --color: darkturquoise; }

[darkviolet] { --color: darkviolet; }

[deeppink] { --color: deeppink; }

[deepskyblue] { --color: deepskyblue; }

[dimgray] { --color: dimgray; }

[dodger] { --color: dodger; }

[gainsboro] { --color: gainsboro; }

[green][color] { --color: webgreen; }

[greenyellow] { --color: greenyellow; }

[honeydew] { --color: honeydew; }

[hotpink] { --color: hotpink; }

[indianred] { --color: indianred; }

[indigo] { --color: indigo; }

[ivory] { --color: ivory; }

[khaki] { --color: khaki; }

[lavender] { --color: lavender; }

[lavenderblush] { --color: lavenderblush; }

[lawngreen] { --color: lawngreen; }

[lemonchiffon] { --color: lemonchiffon; }

[lightblue] { --color: lightblue; }

[lightcoral] { --color: lightcoral; }

[lightcyan] { --color: lightcyan; }

[lightgoldenrod] { --color: lightgoldenrod; }

[lightgray] { --color: lightgray; }

[lightgreen] { --color: lightgreen; }

[lightpink] { --color: lightpink; }

[lightsalmon] { --color: lightsalmon; }

[lightseagreen] { --color: lightseagreen; }

[lightskyblue] { --color: lightskyblue; }

[lightslategray] { --color: lightslategray; }

[lightsteelblue] { --color: lightsteelblue; }

[lightyellow] { --color: lightyellow; }

[lime][color] { --color: lime; }

[limegreen] { --color: limegreen; }

[linen] { --color: linen; }

[magenta][color] { --color: magenta; }

[maroon] { --color: maroon; }

[webmaroon] { --color: webmaroon; }

[mediumaquamarine] { --color: mediumaquamarine; }

[mediumblue] { --color: mediumblue; }

[mediumorchid] { --color: mediumorchid; }

[mediumpurple] { --color: mediumpurple; }

[mediumseagreen] { --color: mediumseagreen; }

[mediumslateblue] { --color: mediumslateblue; }

[mediumspringgreen] { --color: mediumspringgreen; }

[mediumturquoise] { --color: mediumturquoise; }

[mediumvioletred] { --color: mediumvioletred; }

[midnightblue] { --color: midnightblue; }

[mintcream] { --color: mintcream; }

[mistyrose] { --color: mistyrose; }

[moccasin] { --color: moccasin; }

[navajowhite] { --color: navajowhite; }

[oldlace] { --color: oldlace; }

[olive] { --color: olive; }

[olivedrab] { --color: olivedrab; }

[orange][color] { --color: orange; }

[orangered] { --color: orangered; }

[orchid] { --color: orchid; }

[palegoldenrod] { --color: palegoldenrod; }

[paleturquoise] { --color: paleturquoise; }

[palevioletred] { --color: palevioletred; }

[papayawhip] { --color: papayawhip; }

[peachpuff] { --color: peachpuff; }

[peru] { --color: peru; }

[pink][color] { --color: pink; }

[plum] { --color: plum; }

[powderblue] { --color: powderblue; }

[purple][color] { --color: purple; }

[webpurple] { --color: webpurple; }

[rebeccapurple] { --color: rebeccapurple; }

[red][color] { --color: red; }

[rosybrown] { --color: rosybrown; }

[royalblue] { --color: royalblue; }

[saddlebrown] { --color: saddlebrown; }

[salmon] { --color: salmon; }

[sandybrown] { --color: sandybrown; }

[seagreen] { --color: seagreen; }

[seashell] { --color: seashell; }

[sienna] { --color: sienna; }

[silver] { --color: silver; }

[skyblue] { --color: skyblue; }

[slateblue] { --color: slateblue; }

[slategray] { --color: slategray; }

[snow] { --color: snow; }

[springgreen] { --color: springgreen; }

[steelblue] { --color: steelblue; }

[tan] { --color: tan; }

[teal] { --color: teal; }

[thistle] { --color: thistle; }

[tomato] { --color: tomato; }

[turquoise] { --color: turquoise; }

[violet] { --color: violet; }

[wheat] { --color: wheat; }

[whitesmoke] { --color: whitesmoke; }

[yellow][color] { --color: yellow; }

[yellowgreen] { --color: yellowgreen; }

/*
morass/lib/elements/index.css

Bring in Morass CSS.
*/

/**
* align.css
*
* Alignment-related modifiers.
**/

[align][left]        { text-align: left;        }

[align][right]       { text-align: right;       }

[align][center]      { text-align: center;      }

[align][justify]     { text-align: justify;     }

[align][justify-all] { text-align: justify-all; }

[align][top]         { vertical-align: top;     }

[align][bottom]      { vertical-align: bottom;  }

[align][middle]      { vertical-align: middle;  }

/*
background.css

Background-related microclasses.
*/

[background] {
  background-color: var(--color);
}

[background][cover]   { background-size: cover; }

[background][contain] { background-size: contain; }

/*
elements/body.css

Styling of body.
*/

body {
  height: 100vh;

  /* To define the `body` font-family, use a `@font-face` directive.
     For instance, `@font-face { font-family: body; src: local(Arial), local(Helvetica); }`.
     The counterpart of `body` for heading elements is `heading`.
   */
  font-family: body;
}

/*
modifiers/cursor[css]

Morass micro-classes for cursor and pointer events.
*/

[pointer] { cursor: pointer; }

[pointer-events], [pointer-events][auto] {pointer-events: auto; }

[pointer-events][no], [pointer-events][none] { pointer-events: none; }

/*
modifiers/border[css]

Border-related microclasses.
*/

/* WIDTHS */

:root {
  --border-width-global:      medium;
  --border-style-global:      none;
  --border-hue-global:        var(--hue-global);
  --border-saturation-global: var(--saturation-global);
  --border-lightness-global:  var(--lightness-global);
  --border-alpha-global:      var(--alpha-global);;
}

[border] {
  --border-width:      var(--border-width-global);
  --border-style:      var(--border-style-global);
  --border-hue:        var(--border-hue-global, var(--hue-global));
  --border-saturation: var(--border-saturation-global, var(--saturation-global));
  --border-lightness:  var(--border-lightness-global, var(--lightness-global));
  --border-alpha:      var(--border-alpha-globaal, var(--alpha-global));
}

[border]             { --border-width: medium; }

[border][medium]     { --border-width: medium; }

[border][thin]       { --border-width: thin;   }

[border][thick]      { --border-width: thick;  }

[border][hair]       { --border-width: var(--hair); }

[border][em]         { --border-width: var(--em); }

/* COLORS */

[border][primary]    { --border-hue: var(--hue-primary);    }

[border][secondary]  { --border-hue: var(--hue-secondary);  }

[border][success]    { --border-hue: var(--hue-success);    }

[border][warn]       { --border-hue: var(--hue-warn);       }

[border][error]      { --border-hue: var(--hue-error);      }

[border][red]        { --border-hue: var(--hue-red);        }

[border][orange]     { --border-hue: var(--hue-orange);     }

[border][yellow]     { --border-hue: var(--hue-yellow);     }

[border][lime]       { --border-hue: var(--hue-lime);       }

[border][green]      { --border-hue: var(--hue-green);      }

[border][aquamarine] { --border-hue: var(--hue-aquamarine); }

[border][cyan]       { --border-hue: var(--hue-cyan);       }

[border][azure]      { --border-hue: var(--hue-azure);      }

[border][blue]       { --border-hue: var(--hue-blue);       }

[border][purple]     { --border-hue: var(--hue-purple);     }

[border][magenta]    { --border-hue: var(--hue-magenta);    }

[border][pink]       { --border-hue: var(--hue-pink);       }

[border][pure]       { --border-saturation: var(--saturation-pure);     }

[border][x-bright]   { --border-saturation: var(--saturation-x-bright); }

[border][bright]     { --border-saturation: var(--saturation-bright);   }

[border][dull]       { --border-saturation: var(--saturation-dull);     }

[border][x-dull]     { --border-saturation: var(--saturation-x-dull);   }

[border][gray]       { --border-saturation: var(--saturation-gray);     }

[border][white]      { --border-lightness: var(--lightness-white);      }

[border][x-light]    { --border-lightness: var(--lightness-x-light);    }

[border][light]      { --border-lightness: var(--lightness-light);      }

[border][dark]       { --border-lightness: var(--lightness-dark);       }

[border][x-dark]     { --border-lightness: var(--lightness-x-dark);     }

[border][black]      { --border-lightness: var(--lightness-black);      }

[border][opaque]        { --border-alpha: var(--alpha-opaque);          }

[border][translucent]   { --border-alpha: var(--translucent);           }

[border][x-translucent] { --border-alpha: var(--alpha-x-translucent);   }

[border][transparent]   { --border-alpha: var(--alpha-transparent);     }

/* STYLES */

[border]           { --border-style: solid;  }

[border][solid]     { --border-style: solid;  }

[border][dotted]    { --border-style: dotted; }

[border][dashed]    { --border-style: dashed; }

[border][groove]    { --border-style: groove; }

[border][ridge]     { --border-style: ridge;  }

[border][inset]     { --border-style: inset;  }

[border][outset]    { --border-style: outset; }

/* BORDER RADIUS */

[border][rounded]   { border-radius: 0[5em]; }

[border][x-rounded] { border-radius: 1[0em]; }

[border][left]      { border-left-style:   var(--border-style); }

[border][right]     { border-right-style:  var(--border-style); }

[border][top]       { border-top-style:    var(--border-style); }

[border][bottom]    { border-bottom-style: var(--border-style); }

[border]:not([top]):not([bottom]):not([left]):not([right]) { border-style: var(--border-style); }

[border]            {
  border-color: hsla(var(--border-hue), var(--border-saturation), var(--border-lightness), var(--border-alpha));
  border-width: var(--border-width);
}

/* TODO */

/* block-end, block-start, inline-start, inline-end */

/*
modifiers/column.css

Column-related microclasses.
The `--number` variable will be set by classes such as "two".
*/

[columns], [column] { column-count: var(--number, 1); }

[column][balance] { column-fill: balance; }

[column][auto]    { column-fill: auto; }

[column][span]    { column-span: all; -webkit-column-span: all; }

/* TODO: column-rule, column-gap */

/*
lib/modifiers/dimension.css

Widths and heights.
*/

[width]      { width:      var(--length); }

[height]     { height:     var(--length); }

[max-height] { max-height: var(--length); }

[min-height] { min-height: var(--length); }

[max-width]  { max-width:  var(--length); }

[min-width]  { min-width:  var(--length); }

[block-size] { block-size: var(--length); }

[max-block-size] { max-block-size: var(--length); }

[min-block-size] { min-block-size: var(--length); }

[max-content]        { --length: max-content; }

[min-content]        { --length: min-content; }

[available]          { --length: available;   }

[fit-content]        { --length: fit-content; }

[border-box]         { --box: border-box; }

[content-box]        { --box: content-box; }

[ltr] { direction: ltr; }

[rtl] { direction: rtl; }

/**
* styles/modifiers/display.css
*
* CSS classes for `display` property.
*/

[show], [block]            { display: block; }

[hide], [hidden], [hidden] { display: none; }

[inline]                  { display: inline; }

/* [inline][flex] will yield flex-inline */

[inline-block]            { display: inline-block; }

/*
styles/modifiers/flex.css
Flexbox-related modifiers.

Classes defined:

ON CONTAINER:

flex              Use flex display on this container.
inline            Use inline flex display on this container.
horizontal        Distribute items horizontally (default).
vertical          Distribute items vertically.
wrap              Let items wrap to next row or column.
reverse           Layout items in reverse order.

justify           Distribute space between items in main direction.
justify-gap       Distribute space at start, between items, and end in main direction.
justify-h         Distribute space between items in horizontal direction.
justify-h-gap     Distribute space at left, between items, and at right in horizontal direction.
justify-v         Distribute space between items in vertical direction.
justify-v-gap     Distribute space at top, between items, and at end in vertical direction.

align-top         Align tops of horizontal items.
align-middle      Align middles of horizontal items.
align-bottom      Align bottoms of horizontal items.
align-left        Align left edge of vertical items
align-center      Align center of vertical items.
align-right       Align right edge of vertical items.

ON ITEMS:

grow              Allow this item to grow.
x-grow            Allow this item to grow more.
no-shrink         Do not allow this item to shrink.

self-top          Align flex child to top.
self-middle       Align flex child to middle.
self-bottom       Align flex child to bottom.
self-left         Align flex child to left.
self-center       Align flex child to center.
self-right        Align flex child to right.
self-stretch      Stretch flex child.
self-baselnie     Align flex child to baseline.
*/

/*
Basic display types for flex.
`inline` is overloaded; by itself it yields `display: inline`.
*/

[flex]                  { display: flex;          }

[flex][inline]           { display: inline-flex;   }

/*
FLEX DIRECTION.
Note that `vertical` and `horizontal` are also overloaded,
as defined in `direction[css]`.
*/

[flex][vertical]         { flex-direction: column; }

[flex][horizontal]       { flex-direction: row;    }

/*
WRAPPING AND REVERSING.
A `wrap` class turns the `flex-direction` property
into its wrapped variants.
Note: `wrap` is an overloaded property with a different meaning without `flex`.
*/

[flex][wrap]             { flex-wrap: wrap; }

[flex][reverse]          { flex-direction: row-reverse;    }

[flex][vertical][reverse] { flex-direction: column-reverse; }

/*
JUSTIFYING AND ALIGNING.
Since I, for one, can never remember the difference between
`align-items` and `justify-content`, provide human-oriented
direction-based micro-classes such as `top, `left`, etc.
These are interpreted differently depending on `flex-direction`.

Note that `horizontal` is the default.
*/

/*
`justify` by itself refers to justification on the main axis.
There are also `justify-v` and `justify-h` variants for clarity
or for specifying justification on the cross-axis.
`justify-gap` requests distributing space to start and end as well as between.
*/

[flex][justify]           { justify-content: space-between; }

[flex][justify-gap]       { justify-content: space-around; }

[flex][align-top]         { align-items: flex-start; }

[flex][align-bottom]      { align-items: flex-end;   }

[flex][align-middle]      { align-items: center;     }

[flex][align-left]        { justify-content: flex-start; }

[flex][align-right]       { justify-content: flex-end;   }

[flex][align-center]      { justify-content: center;     }

/* For horizontal containers, `justify-h` is the same as `justify`. */

[flex][justify-h]         { justify-content: space-between; }

[flex][justify-h-gap]     { justify-content: space-around;  }

[flex][justify-v]         { align-items: space-between;     }

[flex][justify-v-gap]     { align-items: space-around;      }

[flex][vertical][justify]  { justify-content: space-between;   }

[flex][vertical][justify-gap] { justify-content: space-around; }

[flex][vertical][align-top]    { justify-content: flex-start; }

[flex][vertical][align-bottom] { justify-content: flex-end;   }

[flex][vertical][align-middle] { justify-content: center;     }

[flex][vertical][align-left]   { align-items: flex-start; }

[flex][vertical][align-right]  { align-items: flex-end;   }

[flex][vertical][align-center] { align-items: center;     }

/* For vertical containers, `justify-v` is the same as `justify`. */

[flex][vertical][justify-h]      { align-items: space-between;     }

[flex][vertical][justify-h-gap]  { align-items: space-around;      }

[flex][vertical][justify-v]      { justify-content: space-between; }

[flex][vertical][justify-v-gap]  { justify-content: space-around;  }

/*
GROWING AND SHRINKING.
Provide micro-classes for common cases of grow and shrink.
*/

[grow] { flex-grow: 1; }

[x-grow] { flex-grow: 2; }

[no-shrink] { flex-shrink: 0; }

/* TODO: add other self items */

[self-stretch] { align-self: stretch; }

/* ORDER */

[first] { order: -99; }

[last]  { order: +99; }

/* Self-alignment (of flex children) */

[flex] [self-top]      { align-self: flex-start; }

[flex] [self-middle]   { align-self: center; }

[flex] [self-bottom]   { align-self: flex-end; }

[flex] [self-left]     { align-self: flex-start; }

[flex] [self-center]   { align-self: center; }

[flex] [self-right]    { align-self: flex-end; }

[flex] [self-stretch]  { align-self: stretch; }

[flex] [self-baseline] { align-self: baseline; }

/*
modifiers/font-family.css

Morass micro-classes for font family.
*/

/*
The `heading` and `body` font families are already assigned to
`heading` and `body` elements.
Therefore, these micro-classes should only be needed in special situations.

To define the `heading` or `body` font families, use a `@font-face directive as follows:

```
@font-face {
  font-family: body;
  src: local(Helvetica), local(Arial), sans-serif;
}
```
*/

[heading]    { font-family: heading;    }

[body]       { font-family: body;       }

[serif]      { font-family: serif;      }

[sans-serif] { font-family: sans-serif; }

[monospace]  { font-family: monospace;  }

/*
modifiers/font-variant.css

Micro-classes for font variants.
*/

[small-caps] { font-variant: small-caps; }

/*
morass/modifiers/font-weight.css

font-weight microclasses.
*/

[hairline]                              { font-weight: 100; }

[extra-light], [x-light], [ultra-light] { font-weight: 200; }

[light]                                 { font-weight: 300; }

[normal]                                { font-weight: 400; }

[medium-weight]                         { font-weight: 500; }

[semi-bold], [demi-bold]                { font-weight: 600; }

[strong], [bold]                        { font-weight: 700; }

[extra-bold], [x-bold], [ultra-bold]    { font-weight: 800; }

[heavy]                                 { font-weight: 900; }

[lighter]                               { font-weight: lighter; }

[bolder]                                { font-weight: bolder;  }

/*
elements/heading.css

Styling of `heading` element.
To make this work, enclose your `h1` tags etc. in `heading` tags.
This design is intended to localize the effect of specifying the `heading` font-family.
*/

[heading] {
  /* To define the `heading` font-family, use a `@font-face` directive.
     For instance, `@font-face { font-family: heading; src: local(Arial), local(Helvetica); }`.
     The counterpart of `heading` for body elements is `body`.
   */
  font-family: heading;
}

/**
* indent.css
*
* Test indents.
**/

[indent]      { text-indent: 2em; }

[indent-more] { text-indent: 4em; }

/*
morass/modifiers/letter-spacing[css]

Micro-classes for expanded and condensed text.
*/

[expanded]       { letter-spacing:  0.20em]; }

[expanded-more]  { letter-spacing:  0.40em]; }

[condensed]      { letter-spacing: -0.05em]; }

/*
modifiers/line-height.css

Morass micro-classes for line spacing.
*/

[line][spacing] {
  --line-height: 1[5];
  line-height: var(--line-height);
}

[line][spacing][single]    { --line-height: 1;   }

[line][spacing][double]    { --line-height: 2;   }

[line-spacing][normal]     { --line-height: 1[5]; }

/* CHARACTER SPACING */

[character][spacing] {
  --spacing: var(--length);
  letter-spacing: var(--spacing);
}

[character][spacing][tight]   { --spacing: -0.1em; }

[character][spacingloose]     { --spacing: 0.1em;  }

[character][spacing][x-loose] { --spacing: 0.2em;  }

[character][spacing][normal]  { --spacing: normal; }

/*
modifiers/list[css]

Morass pseudo-classes for lists.
*/

[list][inside]      { list-style-position: inside;  }

[list][outside]     { list-style-position: outside; }

ul[list]           { list-style-type: circle;      }

ol[list]           { list-style-type: decimal;     }

[list][alpha]       { list-style-type: lower-alpha; }

[list][alpha][lower] { list-style-type: lower-alpha; }

[list][alpha][upper] { list-style-type: upper-alpha; }

[list][circle]      { list-style-type: circle;      }

[list][decimal]     { list-style-type: decimal;     }

[list][disc]        { list-style-type: disc;        }

[list][none]        { list-style-type: none;        }

[list][roman]       { list-style-type: lower-roman; }

[list][roman][lower] { list-style-type: lower-roman; }

[list][roman][upper] { list-style-type: upper-roman; }

[list][square]      { list-style-type: square;      }

[list] > * { display: list-item; }

/*
modifiers/padding.css

Morass micro-classes for padding.
Default is `em`.
*/

[padding]      { --length: 1em; }

[padding][left]   { padding-left:   var(--length);   }

[padding][right]  { padding-right:  var(--length);   }

[padding][top]    { padding-top:    var(--length);   }

[padding][bottom] { padding-bottom: var(--length);   }

/* With no side modifier, set on all sides. */

[padding]:not([top]):not([bottom]):not([left]):not([right]) { padding: var(--length); }

/* TODO: handle
padding-block-end
padding-block-start
padding-bottom
padding-inline-end
padding-inline-start
*/

/*
modifiers/margin.css

Morass micro-classes for margins.
*/

[margin]      { --length: 1em; }

[margin][left]   { margin-left:   var(--length); }

[margin][right]  { margin-right:  var(--length); }

[margin][top]    { margin-top:    var(--length); }

[margin][bottom] { margin-bottom: var(--length); }

/* With no side modifier, set on all sides. */

[margin]:not([top]):not([bottom]):not([left]):not([right]) { margin: var(--length); }

/*
modifiers/opacity[css]

Morass pseudo-classes for opacity.
*/

[opaque]      { opacity: 1;   }

[semi-opaque] { opacity: 0.5; }

[transparent] { opacity: 0;   }

[opacity] { opacity: var(--number); }

/* overflow[css] -- Morass classes related to overflow */

[overflow][scroll] { --overflow: scroll; }

[overflow][hidden] { --overflow: hidden; }

[overflow][x], [overflow][horizontal] { overflow-x: var(--overflow); }

[overflow][y], [overflow][vertical]   { overflow-y: var(--overflow); }

[overflow]:not([x]):not([horizontal]):not([y]):not([vertical]) { overflow: var(--overflow); }

/*
morass/modifiers/position[css]

Micro-classes for CSS `position` property.
*/

[absolute] { position: absolute; }

[relative] { position: relative; }

[fixed]    { position: fixed;    }

[sticky]   { position: sticky;   }

[top-left] { top: 0; left: 0; }

/*
lib/elements/q.css

Morass rules for `<q>`.
*/

/* Define smart quotes. */

q { quotes: '\201c' '\201d'; }

q::before { content: open-quote; }

q::after  { content: close-quote; }

/*
modifiers/resize[css]

Morass micro-classes for resizing.
*/

[resize], [resize][x][y], [resize][horizontal][vertical] { resize: both;       }

[resize-x], [resize][horizontal]         { resize: horizontal; }

[resize-y], [resize][vertical]           { resize: vertical;   }

/*
modifiers/ruby[css]

Morass pseudo-classes for ruby.
*/

[ruby][inter-character] { ruby-position: inter-character; }

[ruby][left]            { ruby-position: left;       }

[ruby][over]            { ruby-position: over;       }

[ruby][right]           { ruby-position: right;      }

[ruby][under]           { ruby-position: under;      }

[ruby][align-start]     { ruby-align: start;         }

[ruby-align-center]    { ruby-align: center;        }

/* These class names are meant to be aligned with those for flex. */

[ruby][justify]         { ruby-align: space-between; }

[ruby][justify-gap]     { ruby-align: space-around;  }

[ruby-separate]        { ruby-merge: separate;      }

[ruby-collapse]        { ruby-merge: collapse;      }

/*
modifiers/space[css]

Vertical spacing between elements.

The `[spaced]` class adds space to each child element except the last.
The `[loose]`. and `[tight]` modifiers expand and reduce that space, respectively.
*/

[spaced] > *::after {
  content: '\10';
  display: block;
}

/* Do not apply the spacing to the last child. */

[spaced]          > *::after:last-child { content: ''; }

[spaced]          > *::after { line-height: 1;    }

[spaced][loose]   > *::after { line-height: 1.5;  }

[spaced][x-loose] > *::after { line-height: 2;    }

[spaced][tight]   > *::after { line-height: 0.5;  }

[spaced][x-tight] > *::after { line-height: 0.25; }

/**
 * Text-related utilities.
 **/

/* COLORS */

[test] {
  color: var(--color);
  font-size: var(--length);
}

/* FONT WEIGHT */

[text][hairline]    { font-weight: 100; }

[text][xx-light]    { font-weight: 100; }

[text][extra-light] { font-weight: 200; }

[text][x-light]     { font-weight: 200; }

[text][ultra-light] { font-weight: 200; }

[text][light]       { font-weight: 300; }

[text][normal]      { font-weight: 400; }

[text][medium]      { font-weight: 500; }

[text][semi-bold]   { font-weight: 600; }

[text][demi-bold]   { font-weight: 600; }

[text][bold]        { font-weight: 700; }

[text][strong]      { font-weight: 700; }

[text][extra-bold]  { font-weight: 800; }

[text][x-bold]      { font-weight: 800; }

[text][ultra-bold]  { font-weight: 800; }

[text][heavy]       { font-weight: 900; }

[text][xx-bold]     { font-weight: 900; }

[text][lighter]     { font-weight: lighter; }

[text][bolder]      { font-weight: bolder;  }

/* SIZE */

[text][xx-small]    { --length: xx-small; }

[text][x-small]     { --length: x-small;  }

[text][small]       { --length: small;    }

[text][medium]      { --length: medium;   }

[text][large]       { --length: large;    }

[text][x-large]     { --length: x-large;  }

[text][xx-large]    { --length: xx-large; }

[text][larger]      { --length: larger;   }

[text][smaller]     { --length: smaller;  }

/* ITALICS */

[emphasis]           { font-style: italic;  }

[italic]             { font-style: italic;  }

/* TEXT-TRANSFORM */

[text][upper]        { text-transform: uppercase;  }

[text][lower]        { text-transform: lowercase;  }

[text][capitalize]   { text-transform: capitalize; }

[underline]          { text-decoration: underline; }

/* ALIGNMENT */

[text][align-right]  { text-align: right;   }

[text][align-center] { text-align: center;  }

[text][align-left]   { text-align: left;    }

/*
morass/modifiers/visibility[css]

Morass micro-classes related to the `visibility` property.
*/

[visible]   { visibility: visible; }

[invisible] { visibility: hidden;  }

/*
morass/modifiers/transition[css]

Micro-classes to manage transitions.
*/

/* TRANSITION ALL PROPERTIES */

[transition] {
  transition-property: all;
  transition-duration: var(--length);
}

/* DURATION */

[fast]        { --length: 0.50s; }

[faster]      { --length: 0.25s; }

[slow]        { --length: 1.00s; }

[slower]      { --length: 2.00s; }

/* TIMING FUNCTIONS */

[ease]        { transition-timing-function: ease;        }

[ease-in]     { transition-timing-function: ease-in;     }

[ease-out]    { transition-timing-function: ease-out;    }

[ease-in-out] { transition-timing-function: ease-in-out; }

[linear]      { transition-timing-function: linear;      }

[step-start]  { transition-timing-function: step-start;  }

[step-end]    { transition-timing-function: step-end;    }

/* DELAY */

[delay]       { transition-delay: 0.8s; }

[delay-more]  { transition-delay: 1.6s; }

[delay-less]  { transition-delay: 0.4s; }

/*
morass/modifiers/white-space.css

Break down `white-space` semantically.

I don't know about you, but I can never remember the values for `white-space`.
Every time I want to use one, I have to look it up again.
Actually, it's quite easy when you break it down.
The properties each indicate a combination of whether newlines are to be honored,
whether whitespace is to be preserved, and whether wrapping is desired.

These Morass micro-classes map those concepts into `white-space` values,
so hopefully you'll never have to consult that page again.

Classes defined:

honor-newline        Treat newlines as newlines.
preserve-whitespace  Do not collapse whitespace.
nowrap               Do not wrap.
white-space-normal   Set things back.
*/

/*
Honor newlines, but do not preserve whitespace and wrap.
This corresponds to the common case of displaying a user post.
*/

[honor-newline] { white-space: pre-line; }

/*
Honor newlines while also preserving whitespace.
*/

[honor-newline][preserve-whitespace] { white-space: pre-wrap; }

/*
Honor newlines, preserve whitespace, and do not wrap.
This replicates the behavior of `<pre>'.
You are probably better off using `pre`, although it will
also give you a monospaced font and vertical padding.
*/

[honor-newline][preserve-whitespace][nowrap] { white-space: pre; }

/*
Without honoring newlines, no wrapping means that the output will be on a single line.
In this case, whitespace is never preserved.
CSS offers no alternative for preserving whitespace while not honoring newlines and not wrapping.
*/

[nowrap] { white-space: nowrap; }

/*
`white-space` is an inherited property.
Therefore, in some obscure cases we may need a way to turn it off.
*/

[white-space-normal] { white-space: normal; }

[break-word] { overflow-wrap: break-word; }

/*
modifiers/z-index.js

Define simple z-index-related micro-classes.
*/

[behind], [back]    { z-index: -1;   }

[in-front], [front] { z-index: +1;   }

[backmost]          { z-index: -999; }

[frontmost]         { z-index: +999; }
